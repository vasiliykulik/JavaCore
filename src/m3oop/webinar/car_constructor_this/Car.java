package src.m3oop.webinar.car_constructor_this;

/**
 * Created by Стрела on 03.09.2016.
 * Конструктор - тот же метод - с общей структурой
 * прописана логика как ваш объект вашего класса
 * как создавать
 * В Java by default пустой конструктор.
 * В Java ни один объект не созддастся без конструктора
 * Давайте попробуем - модифицировать наш класс и в принципе объекты
 * Конструктор для инициализации
 * после new идет конструктор
 * Конструктор по умолчанию удаляем и делаем более сложные вещи
 * Создаем Конструктор через поля - опции - в Main
 */
public class Car {
    int year;
    String model;
    int price;
    String nameOfTheName;

    /*
    конструктор, есть тип возвращаемого начения Car, любоц класс это по сути тип, и у него нет названия -
    сразу идут паоаметры - только у Конструктора такой вид
    this - это ссылка на текущий объект с которым мы работаем, по сути объект класса Car внутри, передает Вам объект
    this - это ссылка на все что внутри
    просто так - тоже model можно вызвать
    Зачем нужен this - если так просто можно делать?
    this нужен для того - допустим в Конструкторе - есть переменная model в Car
    и есть параметр входящий model
    У них одинаковое имя, и нам  нужно вот этой переменной - String model; Что делает конструктор? - он инициализирует наш
    объект! то есть мне нужно проинициализировать переменную - дать значение входящего параметра.
    Я ведь не могу model = model - и для этого используется слово this, когда имена накладываются - мне пожалуйста -
    дай поле класса this.model b присвой ему переменную которая идет в параметрах.
    Как можно сделать по другому? параметр назвать подругому:
    model = modelName
    Но так как код генерится автоматически - вручную править нельзя - это займет очень много времени
    Обычно переменные совпадают - и используется ключевое слово this
    this - используется только внутри класса - если писать this в Main - то будут дугие значения
    Помимо этого this дает доступ к методам в классе:
    Вы можете написать и так и так
    test();
    this.test();   это дает какую то гибкость

     */
    public Car(String Name, int year) {
        this.model = Name;
        this.year = year;
    }
}
